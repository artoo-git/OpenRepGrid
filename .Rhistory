}
workbook <- lapply(unique(worksheets$sheet), function(x) {
y <- worksheets[worksheets$sheet == x,]
y_style <- as.data.frame(tapply(y$s, list(y$rows, y$cols), identity),
stringsAsFactors = FALSE)
y <- as.data.frame(tapply(y$v, list(y$rows, y$cols), identity),
stringsAsFactors = FALSE)
if(header) {
colnames(y) <- y[1,]
y <- y[-1,]
y_style <- y_style[-1,]
}
y_style <- sapply(y_style,
function(x) ifelse(length(unique(x)) == 1, unique(x), NA))
if(length(styles) > 0) {
y_style <- styles$numFmtId[match(y_style, styles$applyNumberFormat)]
}
y_style[y_style %in% 14:17] <- "date"
y_style[y_style %in% c(18:21, 45:47)] <- "time"
y_style[y_style %in% 22] <- "datetime"
y_style[is.na(y_style) & !sapply(y, function(x)any(grepl("\\D", x)))] <- "numeric"
y_style[is.na(y_style)] <- "character"
y[] <- lapply(seq_along(y), function(i) {
switch(y_style[i],
character = y[,i],
numeric = as.numeric(y[,i]),
date = as.Date(as.numeric(y[,i]), origin = os_origin),
time = strftime(as.POSIXct(as.numeric(y[,i]), origin = os_origin), format = "%H:%M:%S"),
datetime = as.POSIXct(as.numeric(y[,i]), origin = os_origin))
})
y
})
if(length(workbook) == 1) {
workbook <- workbook[[1]]
}
workbook
}
xlsxToR("slater_addiction.xlsx")
x <- xlsxToR("slater_addiction.xlsx")
x
source('~/Dropbox/R/pkg_dev/grid/OpenRepGrid/dev/xlxs.R')
x
library(OpenRepGrid)
install.packages("roxygen2")
library(OpenRepGrid)
library(OpenRepGrid)
bertinCluster(boeker)
library(OpenRepGrid)
bertinCluster(boeker)
traceback()
library(OpenRepGrid)
bertinCluster(boeker)
library(OpenRepGrid)
library(OpenRepGrid)
library(staticdocs)
?staticdocs
dir()
setwd("~/_mh/programming/R/pkg_dev/grid/OpenRepGrid")
build_package("OpenRepGrid", base_path = "html")
getwd()
dir()
build_package("OpenRepGrid", base_path = "html")
boeker
library(OpenRepGrid)
beoker
boeker
importTxt()
importTxt()
devtools::load_all("~/_mh/programming/R/pkg_dev/grid/OpenRepGrid/OpenRepGrid")
importTxt()
which(data == "BIPOLAR IMPLICATIONS")
integer(0) + integer(0)
Q
devtools::load_all("~/_mh/programming/R/pkg_dev/grid/OpenRepGrid/OpenRepGrid")
importTxt()
library(OpenRepGrid)
importTxt
library(OpenRepGrid)
importTxt()
traceback()
traceback()
importTxt()
importTxt()
traceback()
library(OpenRepGrid)
importTxt()
library(OpenRepGrid)
x <- importTxt()
x+
x
str_trim
library(stringr)
devtools::load_all(".")
importTxt()
data
data <- data[str_trim(data) != ""]    # remove all empty lines
data
devtools::load_all(".")
importTxt()
library(OpenRepGrid)
library(OpenRepGrid)
?OpenRepGrid
library(OpenRepGrid)
devtools::load_all(".")
importTxt()
importTxt()
x <- importTxt()
biplot2d(x)
sh <- subset(x, showlabel==T & showpoint==T)# &
dim(sh)
lpos <- pointLabel(sh[c("x", "y")], labels=sh$label, doPlot=FALSE, cex=cex.pos)     # package maptools
x$x.pos <- NA
x$y.pos <- NA
sh$x.pos <- lpos$x
sh$y.pos <- lpos$y
dim(x[showlabel==T & showpoint==T, ])
x[showlabel==T & showpoint==T, ]
x
sh <- subset(x, showlabel==T & showpoint==T)# &
lpos <- pointLabel(sh[c("x", "y")], labels=sh$label, doPlot=FALSE, cex=cex.pos)     # package maptools
lpos
x$x.pos <- NA
x$y.pos <- NA
sh$x.pos <- lpos$x
sh$y.pos <- lpos$y
x[showlabel==T & showpoint==T, ]
names(x)
dim(x[x$showlabel==T & x$showpoint==T, ] )
devtools::load_all(".")
devtools::load_all(".")
x <- importTxt()
biplot2d(x)
library(OpenRepGrid)
library(OpenRepGrid)
library(OpenRepGrid)
library(OpenRepGrid)
biplot3d(boeker[1:3, ])
biplot3d(boeker[1:4, ])
biplot3d(boeker[1:3, ], c.sphere.col = "red")
biplot3d(boeker[1:3, ], e.sphere.col = "red")
biplot3d(boeker[1:3, ], e.sphere.col = "red", c.text.col="blue")
biplot3d(boeker[1:3, ], c.text.col="red", e.sphere.col = "red", c.text.col="blue")
biplot3d(boeker[1:3, ], e.text.col="red", e.sphere.col = "red", c.text.col="blue")
b3d <- function(...){
biplot3d(..., e.text.col="red", e.sphere.col = "red", c.text.col="blue")
}
b3d(boeker[1:3, ])
b3d(boeker[1:3, ])
b1 <- boeker[1:3, ]
b1
b1
b3d(boeker)
b3d(boeker, e.cex = 0.9)
b3d <- function(...){
biplot3d(..., e.text.col="red", e.sphere.col = "red",
c.text.col="blue", e.cex = 0.7, c.cex=.7)
}
b2 <- boeker[1:4, ]
b2
b3d(b2)
b3d <- function(...){
biplot3d(..., e.text.col="red", e.sphere.col = "red",
c.text.col="blue", e.cex = .8, c.cex=.8)
}
b3d(b2)
devtools::load_all(".")
constructCor
?constructCor
library(OpenRepGrud)
library(OpenRepGrid)
?constructCor
?OpenRepGrid
library(OpenRepGrid)
detach("package:rgl", unload=TRUE)
library("OpenRepGrid", lib.loc="~/Library/R/3.0/library")
?constructCor
library(OpenRepGrid)
?constructCor
b1 <- boeker[1:2, ]
b2 <- swapPoles(b1, 1)
distance(b1)
distance(b2)
constructCor(b1)
constructCor(b2)
library(OpenRepGrid)
stop("This functions requires the xlxs package to be installed.", call. = FALSE)
?STOP
?stop
stop("This functions requires the xlxs package to be installed.",
"xlxs in turn need the JRE to run on your system.", call. = FALSE)
stop("This functions requires the xlxs package to be installed.\n",
"xlxs in turn need the JRE to run on your system.", call. = FALSE)
stop("This functions requires the xlxs package to be installed.\n",
"xlxs in turn needs the JRE to run on your system.\n",
"Install the JRE and the xlxs package if ou wnat to use this feature", call. = FALSE)
stop("This functions requires the xlxs package to be installed.\n",
"xlxs in turn requires the JRE to run on your system.\n",
"Install the JRE and the xlxs package if ou wnat to use this feature", call. = FALSE)
stop("This functions requires the xlxs package to be installed.\n",
"xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"Install the JRE and the xlxs package if ou wnat to use this feature", call. = FALSE)
library(OpenRepGrid)
importExcel
x <- importExcel()
call. = FALSE)
if (missing(file)){                                         # open file selection menu if no file argument is supplied
Filters <- matrix(c("excel", ".xlsx",
"excel", ".xls"),
c
stop("-------------------------------------------------------------------------",
"This functions requires the xlxs package to be installed.\n",
"xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"Install the JRE and the xlxs package if you want to use this feature",
"-------------------------------------------------------------------------",
call. = FALSE)
stop("\n-------------------------------------------------------------------------",
"This functions requires the xlxs package to be installed.\n",
"xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"Install the JRE and the xlxs package if you want to use this feature",
"-------------------------------------------------------------------------",
call. = FALSE)
stop("\n-------------------------------------------------------------------\n",
"This functions requires the xlxs package to be installed.\n",
"xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"Install the JRE and the xlxs package if you want to use this feature",
"---------------------------------------------------------------------",
call. = FALSE)
stop("\n-------------------------------------------------------------------\n",
"This functions requires the xlxs package to be installed.\n",
"xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"Install the JRE and the xlxs package if you want to use this feature\n",
"---------------------------------------------------------------------",
call. = FALSE)
stop("\n-------------------------------------------------------------------\n",
"  This functions requires the xlxs package to be installed.\n",
"  xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"  Install the JRE and the xlxs package if you want to use this feature\n",
"---------------------------------------------------------------------",
call. = FALSE)
stop("\n------------------------------------------------------------------------\n",
"  This functions requires the xlxs package to be installed.\n",
"  xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"  Install the JRE and the xlxs package if you want to use this feature.\n",
"---------------------------------------------------------------------------",
call. = FALSE)
stop("\n--------------------------------------------------------------------------\n",
"  This functions requires the xlxs package to be installed.\n",
"  xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"  Install the JRE and the xlxs package if you want to use this feature.\n",
"---------------------------------------------------------------------------",
call. = FALSE)
stop("\n---------------------------------------------------------------------------\n",
"  This functions requires the xlxs package to be installed.\n",
"  xlxs in turn requires the Java Runtime Environment (JRE) on your system.\n",
"  Install the JRE and the xlxs package if you want to use this feature.\n",
"---------------------------------------------------------------------------",
call. = FALSE)
library(OpenRepGrid)
x <- importExcel()
install.packages("xlsx")
library(OpenRepGrid)
x <- importExcel()
x
library(OpenRepGrid)
?OPenRepGrid
?OpenRepGrid
library(OpenRepGrid)
library(OpenRepGrid)
library(devtools)
install_github("OpenRepGrid", "markheckmann")
library(OpenRepGrid)
?importExcel
align
?align
align
bertinCluster(boeker)
bertinCluster(boeker, along=1)
library(psych)
?devtools
install_deps
pkg_deps
devtools:::pkg_deps
devtools::pkg_deps
devtools:::pkg_deps(OpenRepgrid)
devtools:::pkg_deps("OpenRepGrid")
as.package("OpenRepGrid")
library(pvclust)
?pvclust
library(rgl)
?rgl
?OpenRepGrid
library(xlsx)
check()
check(force_suggests = FALSE)
library(OpenRepGrid)
plyr:::list_to_dataframe
?`:::`
?`:::`
?":::"
?`:::`
?`::`
devtools::load_all(".")
devtools::load_all(".")
getConstructNames(boeker)
l
plyr:::list_to_dataframe(l)
do.call(rbind.data.frame, l)
devtools::load_all(".")
constructInfo(boeker)
info
list_to_dataframe(l)
Q
devtools::load_all(".")
x <- importScivesco()
list_to_dataframe
devtools::load_all(".")
x <- importScivesco()
x
devtools::load_all(".")
x <- importScivesco()
df.ratings <- plyr:::list_to_dataframe(ratings)[-1]
df.ratings
df.ratings <- list_to_dataframe(ratings)[-1]
df.ratings
df.ratings <- plyr:::list_to_dataframe(ratings)[-1]
df.ratings
names(df.ratings) <- "Value"
df.ratings
df.ratings <- list_to_dataframe(ratings)[-1]
names(df.ratings) <- "Value"
df.ratings
devtools::load_all(".")
Q
devtools::load_all(".")
x <- importScivesco()
x <- importScivesco()
devtools::load_all(".")
x <- importScivesco()
devtools::load_all(".")
x <- importScivesco()
plyr:::list_to_dataframe(ratings)[-1]
list_to_dataframe(ratings)[-1]
df.ratings <- list_to_dataframe(ratings)[-1]
names(df.ratings) <- "Value"
df.ratings
round(as.numeric(df.ratings$Value), digits)
x <- importScivesco()
plyr:::list_to_dataframe(ratings)[-1]
df.ratings <- list_to_dataframe(ratings)[-1]
names(df.ratings) <- "Value"
df.ratings
plyr:::list_to_dataframe
df.ratings <- plyr:::list_to_dataframe(ratings)[-1]
df.ratings.2 <- list_to_dataframe(ratings)[-1]
names(df.ratings.2) <- "Value"
df.ratings == df.ratings2
df.ratings == df.ratings.2
all(df.ratings == df.ratings.2)
devtools::load_all(".")
x <- importScivesco()
x
x <- importScivesco()
devtools::load_all(".")
x <- importScivesco()
devtools::load_all(".")
x <- importScivesco()
args
devtools::load_all(".")
x <- importScivesco()
args
devtools::load_all(".")
x <- importScivesco()
l$ratings1
l$ratings2
devtools::load_all(".")
devtools::load_all(".")
x <- importScivesco()
l$ratings1
l$ratings2
list_to_dataframe
Q
x <- importScivesco()
l$ratings1
devtools::load_all(".")
x <- importScivesco()
l$ratings1
devtools::load_all(".")
x <- importScivesco()
df.ratings <- plyr:::list_to_dataframe(ratings)[-1]
df.ratings.2 <- list_to_dataframe(ratings)[-1]
names(df.ratings.2) <- "Value"
print(all(df.ratings == df.ratings.2))
round(as.numeric(df.ratings$Value), digits)
round(as.numeric(df.ratings.2$Value), digits)
df.ratings
df.ratings
df.ratings$Value
df.ratings.2
df.ratings.2$Value
as.numeric(df.ratings$Value)
df.ratings.2
devtools::load_all(".")
x <- importScivesco()
df.ratings <- plyr:::list_to_dataframe(ratings)[-1]
round(as.numeric(df.ratings$Value), digits)
df.ratings.2 <- list_to_dataframe(ratings)[-1]
names(df.ratings.2) <- "Value"
round(df.ratings.2$Value, digits)
df.ratings.2
round(as.numeric(as.character(df.ratings.2$Value)), digits)
devtools::load_all(".")
x <- importScivesco()
l$ratings1
devtools::load_all(".")
x <- importScivesco()
devtools::load_all(".")
x <- importScivesco()
x
x <- importScivesco()
x
leach2001b
?OpenRepGrid
?OpenRepGrid
library(OpenRepGrid)
?OpenRepGrid
?leach2001a
library(OpenRepGrid)
?OpenRepGrid
?OpenRepGrid
build_win
build_win()
devtools::show_news()
?OpenRepGrid
library(OpenRepGrid)
devtools::show_news()
devtools::show_news()
library(OpenRepGrid)
library(OpenRepGrid)
devtools::show_news()
boeker
bertin(boeker)
biplot3d(boeker)
?person
library(OpenRepGrid)
release()
if (! requireNamespace("xlsx", quietly=TRUE) )
print("yes")
xlsx::read.xlsx
library(OpenRepGrid)
build_win()
library(devtools)
build_win()
library(OpenRepGrid)
?OpenRepGrid
citEntry(entry = "book",
author = "Mark Heckmann",
title = "OpenRepGrid - An R package for the analysis of repertory grids",
publisher = "ZENODO",
year = "2011",
isbn = "",
url = "http://www.openrepgrid.uni-bremen.de",
textVersion = "Heckmann, M. (2011). OpenRepGrid - An R package for the analysis of repertory grids. University of Bremen, Germany, Diploma thesis."
)
citEntry(entry = "article",
title = "OpenRepGrid: An R package for the analysis of repertory grids",
doi = "10.5281/zenodo.8492",
journal = "ZENODO",
author = {Heckmann, Mark},
year = "{2014}"",
note = "{doi:10.5281/zenodo.8492}"",
textVersion = "Heckmann, M. (2014). OpenRepGrid: An R package for the analysis of repertory grids. ZENODO. doi:10.5281/zenodo.8492"
)
citEntry(entry = "article",
title = "OpenRepGrid: An R package for the analysis of repertory grids",
doi = "10.5281/zenodo.8492",
journal = "ZENODO",
author = "{Heckmann, Mark}",
year = "{2014}"",
note = "{doi:10.5281/zenodo.8492}"",
textVersion = "Heckmann, M. (2014). OpenRepGrid: An R package for the analysis of repertory grids. ZENODO. doi:10.5281/zenodo.8492"
)
citEntry(entry = "article",
title = "OpenRepGrid: An R package for the analysis of repertory grids",
doi = "10.5281/zenodo.8492",
journal = "ZENODO",
author = "{Heckmann, Mark}",
year = "{2014}",
note = "{doi:10.5281/zenodo.8492}",
textVersion = "Heckmann, M. (2014). OpenRepGrid: An R package for the analysis of repertory grids. ZENODO. doi:10.5281/zenodo.8492"
)
citEntry(entry = "article",
title = "OpenRepGrid: An R package for the analysis of repertory grids",
doi = "10.5281/zenodo.8492",
journal = "ZENODO",
author = "Mark Heckmann",
year = "2014",
note = "doi:10.5281/zenodo.8492",
textVersion = "Heckmann, M. (2014). OpenRepGrid: An R package for the analysis of repertory grids. ZENODO. doi:10.5281/zenodo.8492"
)
citEntry(entry = "article",
title = "OpenRepGrid: An R package for the analysis of repertory grids",
journal = "ZENODO",
author = "Mark Heckmann",
year = "2014",
note = "doi:10.5281/zenodo.8492",
textVersion = "Heckmann, M. (2014). OpenRepGrid: An R package for the analysis of repertory grids. ZENODO. doi:10.5281/zenodo.8492"
)
devtools::load_all(".")
library(OpenRepGrid)
?OPenRepGrid
?OpenRepGrid
citation("OpenRepGrid")
